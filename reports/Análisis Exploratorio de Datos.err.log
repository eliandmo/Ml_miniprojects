Traceback (most recent call last):
  File "C:\Users\Elian\miniconda3\Lib\site-packages\jupyter_core\utils\__init__.py", line 154, in wrapped
    asyncio.get_running_loop()
    ~~~~~~~~~~~~~~~~~~~~~~~~^^
RuntimeError: no running event loop

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "C:\Users\Elian\miniconda3\Lib\site-packages\jupyter_cache\executors\utils.py", line 58, in single_nb_execution
    executenb(
    ~~~~~~~~~^
        nb,
        ^^^
    ...<4 lines>...
        **kwargs,
        ^^^^^^^^^
    )
    ^
  File "C:\Users\Elian\miniconda3\Lib\site-packages\nbclient\client.py", line 1319, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
           ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^
  File "C:\Users\Elian\miniconda3\Lib\site-packages\jupyter_core\utils\__init__.py", line 158, in wrapped
    return loop.run_until_complete(inner)
           ~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^
  File "C:\Users\Elian\miniconda3\Lib\asyncio\base_events.py", line 725, in run_until_complete
    return future.result()
           ~~~~~~~~~~~~~^^
  File "C:\Users\Elian\miniconda3\Lib\site-packages\nbclient\client.py", line 709, in async_execute
    await self.async_execute_cell(
        cell, index, execution_count=self.code_cells_executed + 1
    )
  File "C:\Users\Elian\miniconda3\Lib\site-packages\nbclient\client.py", line 1062, in async_execute_cell
    await self._check_raise_for_error(cell, cell_index, exec_reply)
  File "C:\Users\Elian\miniconda3\Lib\site-packages\nbclient\client.py", line 918, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
plt.subplot(2, 2, 4)
sns.boxplot(data=df, x='Target', y='Average_grade')
plt.title('DistribuciÃ³n de Promedios por Estado de Abandono')
plt.xlabel('Estado del Estudiante')
plt.ylabel('Promedio AcadÃ©mico')

plt.tight_layout()
plt.show()
------------------


[31m---------------------------------------------------------------------------[39m
[31mValueError[39m                                Traceback (most recent call last)
[36mCell[39m[36m [39m[32mIn[6][39m[32m, line 2[39m
[32m      1[39m plt.subplot([32m2[39m, [32m2[39m, [32m4[39m)
[32m----> [39m[32m2[39m [43msns[49m[43m.[49m[43mboxplot[49m[43m([49m[43mdata[49m[43m=[49m[43mdf[49m[43m,[49m[43m [49m[43mx[49m[43m=[49m[33;43m'[39;49m[33;43mTarget[39;49m[33;43m'[39;49m[43m,[49m[43m [49m[43my[49m[43m=[49m[33;43m'[39;49m[33;43mAverage_grade[39;49m[33;43m'[39;49m[43m)[49m
[32m      3[39m plt.title([33m'[39m[33mDistribuciÃ³n de Promedios por Estado de Abandono[39m[33m'[39m)
[32m      4[39m plt.xlabel([33m'[39m[33mEstado del Estudiante[39m[33m'[39m)

[36mFile [39m[32mc:\Users\Elian\miniconda3\Lib\site-packages\seaborn\categorical.py:1597[39m, in [36mboxplot[39m[34m(data, x, y, hue, order, hue_order, orient, color, palette, saturation, fill, dodge, width, gap, whis, linecolor, linewidth, fliersize, hue_norm, native_scale, log_scale, formatter, legend, ax, **kwargs)[39m
[32m   1589[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34mboxplot[39m(
[32m   1590[39m     data=[38;5;28;01mNone[39;00m, *, x=[38;5;28;01mNone[39;00m, y=[38;5;28;01mNone[39;00m, hue=[38;5;28;01mNone[39;00m, order=[38;5;28;01mNone[39;00m, hue_order=[38;5;28;01mNone[39;00m,
[32m   1591[39m     orient=[38;5;28;01mNone[39;00m, color=[38;5;28;01mNone[39;00m, palette=[38;5;28;01mNone[39;00m, saturation=[32m.75[39m, fill=[38;5;28;01mTrue[39;00m,
[32m   (...)[39m[32m   1594[39m     legend=[33m"[39m[33mauto[39m[33m"[39m, ax=[38;5;28;01mNone[39;00m, **kwargs
[32m   1595[39m ):
[32m-> [39m[32m1597[39m     p = [43m_CategoricalPlotter[49m[43m([49m
[32m   1598[39m [43m        [49m[43mdata[49m[43m=[49m[43mdata[49m[43m,[49m
[32m   1599[39m [43m        [49m[43mvariables[49m[43m=[49m[38;5;28;43mdict[39;49m[43m([49m[43mx[49m[43m=[49m[43mx[49m[43m,[49m[43m [49m[43my[49m[43m=[49m[43my[49m[43m,[49m[43m [49m[43mhue[49m[43m=[49m[43mhue[49m[43m)[49m[43m,[49m
[32m   1600[39m [43m        [49m[43morder[49m[43m=[49m[43morder[49m[43m,[49m
[32m   1601[39m [43m        [49m[43morient[49m[43m=[49m[43morient[49m[43m,[49m
[32m   1602[39m [43m        [49m[43mcolor[49m[43m=[49m[43mcolor[49m[43m,[49m
[32m   1603[39m [43m        [49m[43mlegend[49m[43m=[49m[43mlegend[49m[43m,[49m
[32m   1604[39m [43m    [49m[43m)[49m
[32m   1606[39m     [38;5;28;01mif[39;00m ax [38;5;129;01mis[39;00m [38;5;28;01mNone[39;00m:
[32m   1607[39m         ax = plt.gca()

[36mFile [39m[32mc:\Users\Elian\miniconda3\Lib\site-packages\seaborn\categorical.py:67[39m, in [36m_CategoricalPlotter.__init__[39m[34m(self, data, variables, order, orient, require_numeric, color, legend)[39m
[32m     56[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m__init__[39m(
[32m     57[39m     [38;5;28mself[39m,
[32m     58[39m     data=[38;5;28;01mNone[39;00m,
[32m   (...)[39m[32m     64[39m     legend=[33m"[39m[33mauto[39m[33m"[39m,
[32m     65[39m ):
[32m---> [39m[32m67[39m     [38;5;28;43msuper[39;49m[43m([49m[43m)[49m[43m.[49m[34;43m__init__[39;49m[43m([49m[43mdata[49m[43m=[49m[43mdata[49m[43m,[49m[43m [49m[43mvariables[49m[43m=[49m[43mvariables[49m[43m)[49m
[32m     69[39m     [38;5;66;03m# This method takes care of some bookkeeping that is necessary because the[39;00m
[32m     70[39m     [38;5;66;03m# original categorical plots (prior to the 2021 refactor) had some rules that[39;00m
[32m     71[39m     [38;5;66;03m# don't fit exactly into VectorPlotter logic. It may be wise to have a second[39;00m
[32m   (...)[39m[32m     76[39m     [38;5;66;03m# default VectorPlotter rules. If we do decide to make orient part of the[39;00m
[32m     77[39m     [38;5;66;03m# _base variable assignment, we'll want to figure out how to express that.[39;00m
[32m     78[39m     [38;5;28;01mif[39;00m [38;5;28mself[39m.input_format == [33m"[39m[33mwide[39m[33m"[39m [38;5;129;01mand[39;00m orient [38;5;129;01min[39;00m [[33m"[39m[33mh[39m[33m"[39m, [33m"[39m[33my[39m[33m"[39m]:

[36mFile [39m[32mc:\Users\Elian\miniconda3\Lib\site-packages\seaborn\_base.py:634[39m, in [36mVectorPlotter.__init__[39m[34m(self, data, variables)[39m
[32m    629[39m [38;5;66;03m# var_ordered is relevant only for categorical axis variables, and may[39;00m
[32m    630[39m [38;5;66;03m# be better handled by an internal axis information object that tracks[39;00m
[32m    631[39m [38;5;66;03m# such information and is set up by the scale_* methods. The analogous[39;00m
[32m    632[39m [38;5;66;03m# information for numeric axes would be information about log scales.[39;00m
[32m    633[39m [38;5;28mself[39m._var_ordered = {[33m"[39m[33mx[39m[33m"[39m: [38;5;28;01mFalse[39;00m, [33m"[39m[33my[39m[33m"[39m: [38;5;28;01mFalse[39;00m}  [38;5;66;03m# alt., used DefaultDict[39;00m
[32m--> [39m[32m634[39m [38;5;28;43mself[39;49m[43m.[49m[43massign_variables[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mvariables[49m[43m)[49m
[32m    636[39m [38;5;66;03m# TODO Lots of tests assume that these are called to initialize the[39;00m
[32m    637[39m [38;5;66;03m# mappings to default values on class initialization. I'd prefer to[39;00m
[32m    638[39m [38;5;66;03m# move away from that and only have a mapping when explicitly called.[39;00m
[32m    639[39m [38;5;28;01mfor[39;00m var [38;5;129;01min[39;00m [[33m"[39m[33mhue[39m[33m"[39m, [33m"[39m[33msize[39m[33m"[39m, [33m"[39m[33mstyle[39m[33m"[39m]:

[36mFile [39m[32mc:\Users\Elian\miniconda3\Lib\site-packages\seaborn\_base.py:679[39m, in [36mVectorPlotter.assign_variables[39m[34m(self, data, variables)[39m
[32m    674[39m [38;5;28;01melse[39;00m:
[32m    675[39m     [38;5;66;03m# When dealing with long-form input, use the newer PlotData[39;00m
[32m    676[39m     [38;5;66;03m# object (internal but introduced for the objects interface)[39;00m
[32m    677[39m     [38;5;66;03m# to centralize / standardize data consumption logic.[39;00m
[32m    678[39m     [38;5;28mself[39m.input_format = [33m"[39m[33mlong[39m[33m"[39m
[32m--> [39m[32m679[39m     plot_data = [43mPlotData[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mvariables[49m[43m)[49m
[32m    680[39m     frame = plot_data.frame
[32m    681[39m     names = plot_data.names

[36mFile [39m[32mc:\Users\Elian\miniconda3\Lib\site-packages\seaborn\_core\data.py:58[39m, in [36mPlotData.__init__[39m[34m(self, data, variables)[39m
[32m     51[39m [38;5;28;01mdef[39;00m[38;5;250m [39m[34m__init__[39m(
[32m     52[39m     [38;5;28mself[39m,
[32m     53[39m     data: DataSource,
[32m     54[39m     variables: [38;5;28mdict[39m[[38;5;28mstr[39m, VariableSpec],
[32m     55[39m ):
[32m     57[39m     data = handle_data_source(data)
[32m---> [39m[32m58[39m     frame, names, ids = [38;5;28;43mself[39;49m[43m.[49m[43m_assign_variables[49m[43m([49m[43mdata[49m[43m,[49m[43m [49m[43mvariables[49m[43m)[49m
[32m     60[39m     [38;5;28mself[39m.frame = frame
[32m     61[39m     [38;5;28mself[39m.names = names

[36mFile [39m[32mc:\Users\Elian\miniconda3\Lib\site-packages\seaborn\_core\data.py:232[39m, in [36mPlotData._assign_variables[39m[34m(self, data, variables)[39m
[32m    230[39m     [38;5;28;01melse[39;00m:
[32m    231[39m         err += [33m"[39m[33mAn entry with this name does not appear in `data`.[39m[33m"[39m
[32m--> [39m[32m232[39m     [38;5;28;01mraise[39;00m [38;5;167;01mValueError[39;00m(err)
[32m    234[39m [38;5;28;01melse[39;00m:
[32m    235[39m 
[32m    236[39m     [38;5;66;03m# Otherwise, assume the value somehow represents data[39;00m
[32m    237[39m 
[32m    238[39m     [38;5;66;03m# Ignore empty data structures[39;00m
[32m    239[39m     [38;5;28;01mif[39;00m [38;5;28misinstance[39m(val, Sized) [38;5;129;01mand[39;00m [38;5;28mlen[39m(val) == [32m0[39m:

[31mValueError[39m: Could not interpret value `Average_grade` for `y`. An entry with this name does not appear in `data`.

